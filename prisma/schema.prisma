// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id    String     @id
  email String  @unique
  name  String?
  password String
  cards UserCard[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sentFriendRequests     FriendRequest[] @relation("FriendRequestsSent")
  receivedFriendRequests FriendRequest[] @relation("FriendRequestsReceived")
}

model FriendRequest {
  id           Int    @id @default(autoincrement())
  senderId     String
  receiverId   String
  status       FriendRequestStatus @default(PENDING)
  sentAt       DateTime @default(now())
  respondedAt  DateTime?

  sender       User   @relation("FriendRequestsSent", fields: [senderId], references: [id])
  receiver     User   @relation("FriendRequestsReceived", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model Card {
  id        Int     @id @default(autoincrement())
  name     String
  species String
  gender  String
  house   String?
  dateOfBirth String?
  actor   String
  image  String?
  users    UserCard[]
}

model UserCard {
  userId String
  cardId Int
  user   User @relation(fields: [userId], references: [id])
  card   Card @relation(fields: [cardId], references: [id])

  @@id([userId, cardId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  DELETED
}
